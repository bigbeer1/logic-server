// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package speechclient

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SpeechClient is the client API for Speech service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SpeechClient interface {
	PaddleSpeech(ctx context.Context, in *PaddleSpeechReq, opts ...grpc.CallOption) (*PaddleSpeechReply, error)
}

type speechClient struct {
	cc grpc.ClientConnInterface
}

func NewSpeechClient(cc grpc.ClientConnInterface) SpeechClient {
	return &speechClient{cc}
}

func (c *speechClient) PaddleSpeech(ctx context.Context, in *PaddleSpeechReq, opts ...grpc.CallOption) (*PaddleSpeechReply, error) {
	out := new(PaddleSpeechReply)
	err := c.cc.Invoke(ctx, "/speech.speech/PaddleSpeech", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SpeechServer is the server API for Speech service.
// All implementations must embed UnimplementedSpeechServer
// for forward compatibility
type SpeechServer interface {
	PaddleSpeech(context.Context, *PaddleSpeechReq) (*PaddleSpeechReply, error)
	mustEmbedUnimplementedSpeechServer()
}

// UnimplementedSpeechServer must be embedded to have forward compatible implementations.
type UnimplementedSpeechServer struct {
}

func (UnimplementedSpeechServer) PaddleSpeech(context.Context, *PaddleSpeechReq) (*PaddleSpeechReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaddleSpeech not implemented")
}
func (UnimplementedSpeechServer) mustEmbedUnimplementedSpeechServer() {}

// UnsafeSpeechServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SpeechServer will
// result in compilation errors.
type UnsafeSpeechServer interface {
	mustEmbedUnimplementedSpeechServer()
}

func RegisterSpeechServer(s grpc.ServiceRegistrar, srv SpeechServer) {
	s.RegisterService(&Speech_ServiceDesc, srv)
}

func _Speech_PaddleSpeech_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaddleSpeechReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpeechServer).PaddleSpeech(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/speech.speech/PaddleSpeech",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpeechServer).PaddleSpeech(ctx, req.(*PaddleSpeechReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Speech_ServiceDesc is the grpc.ServiceDesc for Speech service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Speech_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "speech.speech",
	HandlerType: (*SpeechServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PaddleSpeech",
			Handler:    _Speech_PaddleSpeech_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "speech.proto",
}
